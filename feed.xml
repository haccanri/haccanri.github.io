<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qing&#39;s Blog</title>
    <description>A website for sharing experience.
</description>
    <link>http://haccanri.github.io/</link>
    <atom:link href="http://haccanri.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 21 Apr 2015 23:41:48 +0800</pubDate>
    <lastBuildDate>Tue, 21 Apr 2015 23:41:48 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>毕业论文写作中的工具使用经验</title>
        <description>&lt;p&gt;本贴叙述我在使用&lt;a href=&quot;https://github.com/xueruini/thuthesis&quot;&gt;ThuThesis&lt;/a&gt;模板写毕业论文中遇到的一些技术性问题及其解决方案。希望给大家带来帮助，少走一些弯路。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;参考文献相关&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;查找bibtex中固定字段。应用场景为将某些工具导出的bibitem中的note，abstract, keyword, volume等删去
以Note字段为例，正则表达式为&lt;code&gt;^ *Note(.|\n)*?\}.*$&lt;/code&gt;，可以匹配多行的一个字段，&lt;code&gt;?&lt;/code&gt;为非贪婪匹配。经测试在Notepad++里可以正常使用该正则表达式。需要删去该字段只需要将匹配的替换成空字符串即可。
&lt;img src=&quot;http://haccanri.github.io/downloads/images/notepad_replace.png&quot; alt=&quot;center&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;我系一些同学参考文献是手动输入的bib item，当需要批量下载bibtex文件时可以使用。从bib item中自动爬出题目及使用&lt;a href=&quot;https://github.com/hildensia/scholar&quot;&gt;scholar.py&lt;/a&gt;自动从Google Scholar下载bibitem的的脚本参见&lt;a href=&quot;https://gist.github.com/haccanri/eac4e7b83e11ae05e3b0&quot;&gt;https://gist.github.com/haccanri/eac4e7b83e11ae05e3b0&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;如果&lt;a href=&quot;https://github.com/xueruini/thuthesis&quot;&gt;ThuThesis&lt;/a&gt;的bib style不能满足系里各种奇葩的需求，最后一招是手动修改&lt;code&gt;.bbl&lt;/code&gt;文件，修改成任何你想要的格式，然后只编译tex，不要修改bib文件也不要编译bib就可以得到最终的参考文献格式。在修改好&lt;code&gt;.bbl&lt;/code&gt;文件之后最好备份一下，以免误操作重新编译bib覆盖了&lt;code&gt;.bbl&lt;/code&gt;文件。&lt;/li&gt;
  &lt;li&gt;参考文献Title大小写。考虑到之前论文的参考文献要求，我在论文题目中仅保留了第一个单词首字母大写。有以下几个例外情况：
    &lt;ul&gt;
      &lt;li&gt;专有名词，如”NP problem”&lt;/li&gt;
      &lt;li&gt;冒号后面的第一个单词，比如Something in title: A case study&lt;/li&gt;
      &lt;li&gt;书的名字，&lt;code&gt;@book&lt;/code&gt;中题目除虚词外每个单词都保留首字母大写&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;处理大小写我使用了网上的一个&lt;a href=&quot;http://www.stat.berkeley.edu/~paciorek/computingTips/Change_case_your_journal_ti.html&quot;&gt;perl脚本&lt;/a&gt;， 使用&lt;code&gt;perl lc.pl file&lt;/code&gt;可以完成上面的除第三条以外的其他大小写转换，有以下几点要注意
 - 在windows系统中，要把&lt;code&gt;system&lt;/code&gt;命令里面的&lt;code&gt;cp&lt;/code&gt;和&lt;code&gt;rm&lt;/code&gt;命令改为对应的&lt;code&gt;copy&lt;/code&gt;和&lt;code&gt;del&lt;/code&gt;命令
 - &lt;code&gt;file&lt;/code&gt;为不带后缀名的文件名，也就是要处理test.tex时&lt;code&gt;file&lt;/code&gt;为’test’。不知道作者为什么设置得这么诡异。
 - 处理完有一些小的bug，比如Title中第一个单词有些全部大写的没有正确转换，比如”THE”，知道是故意的还是bug
 - 上面第二条冒号规则需要手工处理，或许有空了可以改进吧，不过perl脚本不太愿意看&lt;/p&gt;

    &lt;p&gt;有些Latex bib style本身也会对大小写做些处理，比如只保留首字母大写，这时如果想手工保留某些专有名词的大写，可以给大写字符串专门加上大括号，比如&lt;code&gt;{NP}&lt;/code&gt;。JabRef软件可以自动做这样的处理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;参考文献引用到一本书具体的页面，并且显示在上标里，参见&lt;a href=&quot;http://tex.stackexchange.com/questions/51646/superscript-page-numbers-with-natbib&quot;&gt;这个页面&lt;/a&gt;，修改cls文件里对应的语句即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;latex&quot;&gt;零散的Latex命令及小技巧&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;\verb|XXX|&lt;/code&gt;可以原文引入&lt;code&gt;XXX&lt;/code&gt;处的文字，适合转义比较多且不包含命令的情况。&lt;code&gt;\textt{}&lt;/code&gt;貌似可以处理里面包含命令的情况，没有测试&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\linespread{1.1}&lt;/code&gt;可以修改行距，1.0是原本的行距，1.1是之前的1.1倍。这个可以高效地调整页数，一般1.1倍行距肉眼很难看出来。
在投会议论文时，由于页数限制，往往压缩的时候大招就是使用&lt;code&gt;\linespread{0.95}&lt;/code&gt;之类的。不到万不得已，最好不要使用这招。&lt;/li&gt;
  &lt;li&gt;如果写作的过程中需要给之后的写作提个醒，但在最终版中方便地去掉，可以有几种方式来加上类似于Todo标签
    &lt;ol&gt;
      &lt;li&gt;最简单不折腾的是，用注释&lt;code&gt;%todo&lt;/code&gt;来标注出来。在&lt;a href=&quot;http://texstudio.sourceforge.net/&quot;&gt;TeXstuio&lt;/a&gt;软件中会在结构树中自动罗列出&lt;code&gt;%todo&lt;/code&gt;标识的todo标签。&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;自己定义一个简单的todo命令来标识，通过设置类似于debug开关的选项来决定是否在pdf中输出。&lt;/p&gt;

        &lt;p&gt;&lt;code&gt;
 \newcommand{\todo}[1]{}  %comment not showed
 %\newcommand{\todo}[1]{\color{blue} #1} %comment showed
&lt;/code&gt;
需要显示的话注释第一条，最终打印版本注释第二条（代码中所示）。comment的格式可以在命令中自己修改。代码中使用的是蓝色来标识的，需要使用xcolor这个包。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;可以使用[todonotes][http://www.ctan.org/tex-archive/macros/latex/contrib/todonotes/]等专业的tex package来完成，但如果只是给自己看的话真心没必要折腾这个。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;一个可以把Excel中的表格转换为Tex代码的Excel加载项。虽然逻辑很简单，但非常实用。矩阵等也可以用这个来处理。下载链接为&lt;a href=&quot;https://www.ctan.org/tex-archive/support/excel2latex/&quot;&gt;https://www.ctan.org/tex-archive/support/excel2latex/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;latex-1&quot;&gt;Latex中文编码&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;模板及Tex文件默认是GB18030编码，用pdflatex编译没问题。但是在GitHub for windows中是乱码，因为GitHub for windows目前只支持标准utf8。本来想折腾下，后来放弃了。Git Gui可以支持GB18030编码，最后的方案是在这里看GB18030编码的diff。
    &lt;ul&gt;
      &lt;li&gt;将所有tex及模板文档改为utf-8直接用xeLatex编译会报错&lt;code&gt;Command \nobreakspace unavailable in encoding EU1&lt;/code&gt;。按照&lt;a href=&quot;http://tex.stackexchange.com/questions/78766/command-nobreakspace-unavailable-in-encoding-eu1-if-i-use-xelatex&quot;&gt;这个页面&lt;/a&gt;中的说明删掉xunicode引用，并且可以用xeLatex编译成功。但pdfLatex编译仍然失败，报错为&lt;code&gt;! Argument of \HyPsd@GetTwoBytes has an extra&lt;/code&gt;。&lt;/li&gt;
      &lt;li&gt;终极解决方案是用CJKutf8 package并且用支持utf8的模板，鉴于我的论文模板不支持utf8，到这里决定不折腾了。以后想折腾可以参考以下页面
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://duguying.net/article/texlive%E4%B8%AD%E6%96%87%E4%B9%A6%E7%AD%BE%E4%B9%B1%E7%A0%81&quot;&gt;texlive中文书签乱码&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://www.woxihuan.com/28722687/1343209679129632.shtml?isalbum=1&quot;&gt;casthesis utf8的问题&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;最新版的ThuThesis已经支持utf-8，不过貌似不太稳定（只能用xeLatex，pdfLatex需要安装字字体之类的比较麻烦），我编译出来的图片位置不对。不折腾了…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;在编译tex之前执行&lt;code&gt;gbk2uni main.out&lt;/code&gt;命令可以解决书签中文乱码的问题。可以在TeXstudio中自定义一个命令，并绑定快捷键使用起来会很方便，如果导入我的设置文件的话可以在F1快捷编译之后，再按F2编译一次，就可以得到中文书签正常的pdf。自定义的命令其实是将&lt;code&gt;gbk2uni main.out&lt;/code&gt;和编译命令结合在一起得到的，如下图所示
&lt;img src=&quot;http://haccanri.github.io/downloads/images/bookmark.png&quot; alt=&quot;center&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;用Python和Matplotlib画图中有中文的情况请参考&lt;a href=&quot;http://blog.sciencenet.cn/home.php?mod=space&amp;amp;uid=43412&amp;amp;do=blog&amp;amp;id=343002&quot;&gt;页面1&lt;/a&gt;和&lt;a href=&quot;http://blog.csdn.net/rumswell/article/details/6544377&quot;&gt;页面2&lt;/a&gt;，我是两种方法结合在一起最后实现的显示中文。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 22 Apr 2015 07:26:29 +0800</pubDate>
        <link>http://haccanri.github.io/tools/2015/04/22/thesis_experience_tex.html</link>
        <guid isPermaLink="true">http://haccanri.github.io/tools/2015/04/22/thesis_experience_tex.html</guid>
        
        <category>thesis</category>
        
        <category>tools</category>
        
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Texstudio使用经验</title>
        <description>&lt;p&gt;本贴介绍我在写毕业论文的过程中使用TeXstudio的一些经验。&lt;/p&gt;

&lt;p&gt;在一开始的时候我用的是&lt;a href=&quot;http://www.xm1math.net/texmaker/&quot;&gt;Texmaker&lt;/a&gt;,由于包含中文以及多个文件的tex和pdf的跳转有问题，在写毕业论文的过程中我最终转向了&lt;a href=&quot;http://texstudio.sourceforge.net/&quot;&gt;TeXstudio&lt;/a&gt;。经过一段时间的体验，我觉得TeXstudio还是很棒的。TeXstudio是曾经从Texmaker独立出来之后发展起来的一个tex编辑器，很多界面命令都一样，从Texmaker到TeXstudio的迁移是容易的。整体上来说，Texmaker的设计更倾向于对用户友好，不易出错，有点像Apple公司的风格（不过windows下的UI真心一般），TeXstudio适合码农来用（普通使用也是棒棒哒），有各种高级设置，可编程的宏命令功能非常强大。下面对比下两款软件。&lt;/p&gt;

&lt;h2 id=&quot;texmakertexstudio&quot;&gt;TeXmaker和TeXstudio对比&lt;/h2&gt;

&lt;p&gt;我先陈述下Texmaker相比于TeXstudio的优点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;可以自动检测tex文件的编码，提示是否按照对应编码方式打开。这对一些初级用户使用非utf-8格式的编码提供了方便。&lt;/li&gt;
  &lt;li&gt;在structure面板中无限自定义命令超赞，可以用&lt;code&gt;:XX+向右键&lt;/code&gt;转换，有种用vim的感觉（这个功能也可以部分地由TeXstudio的宏实现）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后列表Texstudio的优点，其中Texmaker也有的功能做了标注。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;整体界面UI面积减小，把更多的空间留给编辑和pdf窗口，更容易focus。高级用户可以在高级选项更细致地调节，貌似这也是最初TexStuio跟TextMaker设计哲学不合的体现吧。刚安装TeXstudio的时候其实差点因为其太丑而卸掉，主要是默认字体在中文系统下太难看加上tex代码里一片错误命令的高亮提示。在使用经验中我会给出我目前使用的配置文件以及增加自定义命令的方式。&lt;/li&gt;
  &lt;li&gt;更强大的structure预览，定义完主文档后会一直在。&lt;/li&gt;
  &lt;li&gt;支持定义各种meta信息，包括编码信息（此功能Texmaker 4.4.1版本也有）、主文档信息等。
 &lt;code&gt;
 % !TeX root = main.tex
 % !TEX encoding=GB18030
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;支持自动恢复上次的会话。也就是能把上次打开的文档全部自动打开，对于编辑多文件的毕业论文非常实用。Texmaker可以保存会话也可以加载会话，不过笔者使用时最新的版本4.4.1没有自动恢复上次会话的功能。&lt;/li&gt;
  &lt;li&gt;文档内高亮设置，错误命令高亮等如果设置好了非常易于写作。可以通过”选项-设置-补全”选项卡内的扩展命令集来去除一些不应该的错误高亮。[ThuThesis]相关的命令集选项中也有，但不是很全，后面会介绍怎么自己添加。&lt;/li&gt;
  &lt;li&gt;公式行内预览对于大文档内局部公式编辑有很大帮助，实时预览和强大的纠错功能是亮点。&lt;/li&gt;
  &lt;li&gt;TeXstuio的快捷编译可以自动地检测bib文件的变化并自动编译多遍直至交叉引用成功，这一点也很实用。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;texstudio&quot;&gt;TeXstudio使用经验&lt;/h2&gt;

&lt;p&gt;接下来我主要陈述下使用TeXstudio的一些经验，分为初级和高级两部分。其实如果你需要长时间使用一个软件，一个最好的学习方式就是把选项一个个看过去，把帮助文档也大致看一看。然而每个人使用软件的习惯终究不一样。突然想起我在《吉祥纹莲花楼》这部小说中看到的几句话。
&lt;img src=&quot;http://haccanri.github.io/downloads/images/belief.jpg&quot; alt=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;初级使用&lt;/h3&gt;

&lt;p&gt;在对比Texmaker和TeXstudio的过程中我们其实已经给出了一些，这里再重新整理下。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在子文档中编译整个文档。毕业论文的模板包含多个文件，写作往往在子文件里，然而如果不加设置地直接编译子文件是会报错的。这时需要在“选项”中设置主文档或者在主文档第一行中加入meta信息&lt;code&gt;% !TeX root = main.tex&lt;/code&gt;(假设主文档是main.tex的话)。这样在任何一个子文件都可以直接编译，等价于编译main.tex。&lt;/li&gt;
  &lt;li&gt;常用快捷键。F1快捷编译（可以在选项里面改其用的编译命令，默认是pdflatex），F7查看tex对应的pdf，在pdf中按住ctrl单击可以跳转到对应的tex文件。Ctrl+E添加begin，end环境。Alt+P预览行内数学公式。Ctrl+Shift+M添加行内数学公式（因为经常使用，我添加了额外的快捷键Ctrl+`）。Alt+Shift+M添加显示数学公式。其他的默认快捷键参见帮助中的用户指南。快捷键的使用可以大大提高写作效率。&lt;/li&gt;
  &lt;li&gt;标签的使用。在一个较长的文档中，经常需要前后滚动鼠标，有时回到正在书写的地方是费事的，因此可以点击这一行左侧界面的空白处，添加标签。按Ctrl+n (n为标签的编号，一个文档至多有3个标签)或者点整个界面右下角，或者从结构面板的标签选项卡里点击可以跳转到该书签。其他的跳转命令可以参见菜单中的“编辑-跳转到”，其中Ctrl+H跳转到上一次修改处也是很实用的。不过貌似点击一次总是会回到当前文档头部，需要再按一次才能到之前修改的地方。&lt;/li&gt;
  &lt;li&gt;在pdf面板中点击显示可以选择时钟（clock），可以双击单独显示也可以调整大小。虽然功能很简单，不过可以作为督促自己专心写论文的小工具哦。
其他功能和使用技巧请参见&lt;a href=&quot;http://texstudio.sourceforge.net/manual/current/usermanual_en.html]和[官网][http://texstudio.sourceforge.net/&quot;&gt;帮助文件&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;高级使用&lt;/h3&gt;

&lt;p&gt;通过导入我的&lt;a href=&quot;http://haccanri.github.io/downloads/files/qing_2015_04_21.txsprofile&quot;&gt;配置文件&lt;/a&gt;可以拥有文中提及的一些功能。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;自定义补全&lt;/h4&gt;

&lt;p&gt;一些TeXstudio无法识别的命令会高亮显示出来，大面积的高亮非常丑。TeXstudio自己收集了一些常见package的命令，可以在”选项-设置-补全”选项卡内选择对应的扩展命令集来去除一些不应该的错误高亮。然而有些package或者自定义的命令很可能识别不全，这时需要手动添加。TeXstudio中自动补全的命令是有cwl文件来记录的。cwl文件路径为C:\Users\%UserName%\AppData\Roaming\texstudio，找出一个cwl文件添加自己需要的命令即可，我是在thuthesis.cwl和thutils.cwl里修改的。添加的格式可以参考&lt;a href=&quot;http://texstudio.sourceforge.net/manual/current/usermanual_en.html#CWLDESCRIPTION&quot;&gt;帮助文件&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;自定义宏&lt;/h4&gt;
&lt;p&gt;有时会有一些特殊的需求而软件没有给出这个功能时，可以用宏来实现。TeXstudio的宏大致原理是用触发器（trigger）或者类似于latex命令（没用过这个功能）来触发宏，然后通过三种方式来跟编辑器等来交互实现用户自定义的功能。这三种方式分别为“正常”、“环境”和“脚本”，具体的文档参见&lt;a href=&quot;http://texstudio.sourceforge.net/manual/current/usermanual_en.html#SECTION33&quot;&gt;帮助文件&lt;/a&gt;。帮助文件中给了大量的例子，比如计算器。下面给出几个我使用过的例子。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文本替换也就是正常替换。Texmaker 4.4.1可以自定义命令&lt;code&gt;:XX+向右键&lt;/code&gt;，用自定义类似于vim的命令来实现简单命令到复杂文本（可以是命令）的替换。在TeXstudio中可以用宏来代替。之所以在对比中说是部分地实现该功能，是因为我目前还没有找到键盘映射如何触发宏。TeXstudio使用正则表达式来匹配trigger，虽然无法匹配某些按键，但是也更灵活。我自己的使用中用Tab键(\t)来作为一般的触发键。比如如果经常使用itemize，而且希望出来三个item的话，可以使用以下的宏。触发器为&lt;code&gt;:i\t&lt;/code&gt;，宏内容是自己想替换的文本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;itemize&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%&amp;lt;%&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%&amp;lt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;itemize&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;%|&lt;/code&gt;指鼠标的跳转，&lt;code&gt;%&amp;lt;%&amp;gt;&lt;/code&gt;是占位符，跳转到下一个占位符的快捷键是Ctrl+向右键。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;环境模式适用于添加begin,end这样的环境。可以用%environment来触发&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;脚本模式可以用来实现更复杂的命令，下面给出两个例子。这两个例子都是通过正则表达式获得匹配内容，然后在前后加上一些文本。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;例子一，给变量加行内数学模式。&lt;/strong&gt;如果经常要使用行内数学模式来标记一些变量，那么每次即使按快捷键添加&lt;code&gt;$ $&lt;/code&gt;，然后再输入比如变量&lt;code&gt;p&lt;/code&gt;也比较麻烦。可以实现一个宏，当输完&lt;code&gt;p&lt;/code&gt;之后按下Tab键就可以自动地在&lt;code&gt;p&lt;/code&gt;前后加上&lt;code&gt;$ $&lt;/code&gt;。触发器为&lt;code&gt;([A-Za-z0-9, _=\^\(\)&#39;\\]+)\t&lt;/code&gt;，宏内容为&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SCRIPT&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;triggerMatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$ &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; $&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;例子二，引用时自动加上前后缀。&lt;/strong&gt;引用不同的类型，比如章、节、图、表、公式等需要前后加不同的描述，可以实现一个脚本自动根据标签的前几个字符来判断。假设用户给章的label都是&lt;code&gt;\label{cha:XXX}&lt;/code&gt;，给节的都是&lt;code&gt;\label{sec:XXX}&lt;/code&gt;之类的可以使用下面的宏。触发器为&lt;code&gt;\\ref\{([a-z]{2,10}):\w+\}\t&lt;/code&gt;，宏为&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SCRIPT&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triggerMatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triggerMatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;equ&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;式(&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fig&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;图&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cha&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;第&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;章&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sec&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;节&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;thm&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;定理&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;def&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;定义&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;def&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;定义&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;alg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;算法&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 22 Apr 2015 06:58:47 +0800</pubDate>
        <link>http://haccanri.github.io/tools/2015/04/22/tex_editor.html</link>
        <guid isPermaLink="true">http://haccanri.github.io/tools/2015/04/22/tex_editor.html</guid>
        
        <category>TeXmaker</category>
        
        <category>TeXstudio</category>
        
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Markdown, Pandoc and Jekyll</title>
        <description>&lt;p&gt;本贴介绍我在学习Markdown, Pandoc, Jekyll的过程中很初步的一些经验。&lt;/p&gt;

&lt;h1 id=&quot;markdown&quot;&gt;Markdown参考资料&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;GFM(GitHub Flavored Markdown)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/github-flavored-markdown/&quot;&gt;https://help.github.com/articles/github-flavored-markdown/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/markdown-basics/&quot;&gt;https://help.github.com/articles/markdown-basics/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Standard markdown
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;http://daringfireball.net/projects/markdown/syntax&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Tips
    &lt;ul&gt;
      &lt;li&gt;End a line with two spaces to add a &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; linebreak:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;pandoc&quot;&gt;Pandoc参考资料&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;可以从&lt;a href=&quot;https://github.com/jgm/pandoc/releases/&quot;&gt;这里&lt;/a&gt;安装Pandoc，直接下载msi文件安装就行&lt;/li&gt;
  &lt;li&gt;虽然是2012年的博客，不过其中的东西都还好用，比如编译pdf的命令。&lt;a href=&quot;http://www.yangzhiping.com/tech/pandoc.html&quot;&gt;http://www.yangzhiping.com/tech/pandoc.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;这里面详细解释了pandoc编译中文pdf的各种坑。&lt;a href=&quot;http://blog.sina.com.cn/s/blog_5ee56d450101dah2.html&quot;&gt;http://blog.sina.com.cn/s/blog_5ee56d450101dah2.html&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;使用&lt;code&gt;fc-list &amp;gt; C:\fonts.txt&lt;/code&gt;的方式输出系统中的字体名字非常好用，只是列表非常大，可能需要搜索一些关键字来查看，比如_黑_，_宋_之类的&lt;/li&gt;
      &lt;li&gt;目前使用微软雅黑字体（Microsoft YaHei，大小写是敏感的）不会出现文字超过边界，而使用宋体（SimSun）和黑体（SimHei）会出现超出边界的问题，使用模板应该可以，没有亲自测试。相关命令如下&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pandoc test.md -o test.pdf --latex-engine&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xelatex -V &lt;span class=&quot;nv&quot;&gt;mainfont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Microsoft YaHei&amp;quot;&lt;/span&gt;
pandoc test.md -o test.docx --css&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://raw.githubusercontent.com/nicolashery/markdownpad-github/master/markdownpad-github.css &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;不加&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;--css&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;选项貌似效果一样&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;pandoc的更多用法参见http://johnmacfarlane.net/pandoc/demos.html
    &lt;ul&gt;
      &lt;li&gt;用–toc选项可以在html中生成目录。&lt;/li&gt;
      &lt;li&gt;用beamer做slides也超赞&lt;/li&gt;
      &lt;li&gt;HTML slide shows也超赞&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;用pandoc可以把带latex公式的markdown文件转化成docx的公式以及包含公式的pdf，这个超赞！&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;jekyll&quot;&gt;Jekyll参考资料&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;安装
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/docs/windows/#installation&quot;&gt;http://jekyllrb.com/docs/windows/#installation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如果遇到报错“Liquid Exception: Incompatible character encoding”，需要更改console的code page&lt;/p&gt;

        &lt;p&gt;&lt;code&gt;     
    chcp 65001
 &lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jekyll-windows.juthilo.com/&quot;&gt;http://jekyll-windows.juthilo.com/&lt;/a&gt;。在安装jekyll gem包的时候会遇到ssl报错的情况，可以参见&lt;a href=&quot;https://gist.github.com/luislavena/f064211759ee0f806c88&quot;&gt;https://gist.github.com/luislavena/f064211759ee0f806c88&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 31 Mar 2015 21:50:52 +0800</pubDate>
        <link>http://haccanri.github.io/learning/2015/03/31/markdown_pandoc_jeklly.html</link>
        <guid isPermaLink="true">http://haccanri.github.io/learning/2015/03/31/markdown_pandoc_jeklly.html</guid>
        
        <category>markdown</category>
        
        <category>pandoc</category>
        
        <category>jekyll</category>
        
        
        <category>learning</category>
        
      </item>
    
  </channel>
</rss>
